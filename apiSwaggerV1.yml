swagger: "2.0"
info:
  description: "Dashboard REST API for Service monitoring CRUD operations and APN push tokens."
  version: "1.0.0"
  title: "Dashboard Service"
host: "localhost:8080"
basePath: "/dashboard"
tags:
- name: "Users"
  description: "User account operations"
- name: "Services"
  description: "Service CRUD operations"
schemes:
# - "https"
- "http"
paths:
  /users:
    post:
      tags:
      - "Users"
      summary: "Create a user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object to be created"
        required: true
        schema:
          type: object
          properties:
            pushToken:
              type: "string"
          
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Bad request"
        500:
          description: "Internal server error"
  /services:
      get:
        tags:
        - "Services"
        summary: "Get all Services for this User"
        produces:
        - "application/json"
        responses:
          200:
            description: "successful operation"
            schema:
              type: array
              items:
                $ref: "#/definitions/Service"
          404:
            description: "No Services found"
      post:
        tags:
        - "Services"
        summary: "Add a new Service"
        description: "Adds a new service and begins tracking its uptime"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - in: "body"
          name: "body"
          description: "Service object to be added"
          required: true
          schema:
            $ref: "#/definitions/Service"
        responses:
          405:
            description: "Invalid input"
  /services/{serviceId}:
    get:
      tags:
      - "Services"
      summary: "Find Service by ID"
      description: "Returns a single Service"
      produces:
      - "application/json"
      parameters:
      - name: "serviceId"
        in: "path"
        description: "ID of the Service to return"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Service"
        400:
          description: "Invalid ID"
        404:
          description: "Service not found"
    put:
      tags:
      - "Services"
      summary: "Updates a Service in the store with form data"
      description: ""
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "serviceId"
        in: "path"
        description: "ID of Service to update"
        required: true
        type: "integer"
        format: "int32"
      - name: "name"
        in: "formData"
        description: "Updated name of the service"
        required: false
        type: "string"
      - name: "url"
        in: "formData"
        description: "Updated url of the Service"
        required: false
        type: "string"
      responses:
        405:
          description: "Invalid input"
    delete:
      tags:
      - "Services"
      summary: "Deletes a Service"
      description: ""
      produces:
      - "application/json"
      parameters:
      # TODO
      # - name: "api_key"
      #   in: "header"
      #   required: false
      #   type: "string"
      - name: "serviceId"
        in: "path"
        description: "Service id to delete"
        required: true
        type: "integer"
        format: "int32"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Service not found"
definitions:
  User:
    type: "object"
    required:
    - "pushToken"
    properties:
      id:
        type: "integer"
        format: "int32"
      pushToken:
        type: "string"
  Service:
    type: "object"
    required:
    - "name"
    - "url"
    properties:
      name:
        type: "string"
        example: "my website"
      url:
        type: "string"
        format: "url"
        example: "https://patrickgatewood.com"
        
      
